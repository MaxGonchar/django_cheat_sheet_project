"""
Django settings for bboard project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path

from .configurations import MY_SECRET_KEY, MY_EMAIL_HOST_PASSWORD,\
    MY_SOCIAL_AUTH_GOOGLE_OAUTH2_KEY, MY_SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = MY_SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main.apps.MainConfig',
    # pip install django-bootstrap4 (for page management)
    'bootstrap4',
    # pip install social-auth-app-django (for registration, using social webs)
    'social_django',
    # pip install django-cleanup -
    # (for deleting loaded files after deleting their records in models)
    'django_cleanup',
    # pip install easy-thumbnails - (for creating mini images)
    'easy_thumbnails',
    # pip install django-simple-captcha -
    # (for captcha for not registered users,
    # mast to be indicated in project urls)
    'captcha',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bboard.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # registration custom context_processor,
                # placed in 'middlewares.py'
                'main.middlewares.bboard_context_processor',
            ],
        },
    },
]

WSGI_APPLICATION = 'bboard.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': BASE_DIR / 'db.sqlite3',  # default
        'NAME': os.path.join(BASE_DIR, 'bboard.data')
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

# ======================== Add by myself =====================================
# we will indicate our AdvUser model as a user model used
# by the Django access control subsystem
AUTH_USER_MODEL = 'main.AdvUser'

# --------------------for email-----------------------------
# pip install django_smtp_ssl!
# allow Unsafe apps in google account!
# https://myaccount.google.com/u/1/lesssecureapps
EMAIL_BACKEND = 'django_smtp_ssl.SSLEmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'fordevexperiments@gmail.com'
EMAIL_HOST_PASSWORD = MY_EMAIL_HOST_PASSWORD
EMAIL_PORT = 465
EMAIL_USE_TLS = True

# ----------for registration, using social webs-------------
# pip install social-auth-app-django (for registration, using social webs)
AUTHENTICATION_BACKENDS = (
    # for authentication, using google
    'social_core.backends.google.GoogleOAuth2',
    # for not to lost our own authentication
    'django.contrib.auth.backends.ModelBackend',
)

# SOCIAL_AUTH_URL_NAMESPACE = 'social'

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = MY_SOCIAL_AUTH_GOOGLE_OAUTH2_KEY
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = MY_SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET

LOGIN_URL = '/auth/login/google-oauth2/'

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# -------- for handling main images ----------------
MEDIA_ROOT = os.path.join(BASE_DIR, 'main/media')
MEDIA_URL = '/media/'

# -------- for handling mini images ----------------
THUMBNAIL_ALIASES = {
    '': {
        'default': {
            'size': (96, 96),  # size for all mini images
            'crop': 'scale',  # means at least one dimension fits
            # within the size dimensions given
        }
    }
}
THUMBNAIL_BASEDIR = 'thumbnails'
